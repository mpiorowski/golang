syntax = "proto3";

package homeit;

option go_package = "github.com/mpiorowski/golang/homeit";
option java_multiple_files = true;
option java_outer_classname = "HomeItProto";
option java_package = "io.grpc.homeit.proto";

message Empty {}
message UserId {
  string userId = 1;
}

service UsersService {
  rpc CreateToken(TokenRequest) returns (Token) {}
  rpc Login(LoginRequest) returns (Session) {}

  rpc CreateUser(stream User) returns (stream User) {}
  rpc GetUsers(Empty) returns (stream User) {}
}

message TokenRequest {
  string email = 1;
}

message LoginRequest {
  string email = 1;
  string code = 2;
}

message Session {
  string sessionId = 1;
  string userId = 2;
  string role = 3;
  string email = 4;
}

message Token {
  string id = 1;
  string created = 2;
  string updated = 3;
  bool deleted = 4;

  string code = 5;
  string email = 6;
  string expires = 7;
}

enum UserRole {
  ROLE_USER = 0;
  ROLE_ADMIN = 1;
}

message User {
  string id = 1;
  string created = 2;
  string updated = 3;
  bool deleted = 4;

  string email = 5;
  string role = 6;
  string lastLogin = 7;
}

service FilesService {
  rpc GetFiles(TargetId) returns (stream File) {}
  rpc CreateFile(File) returns (File) {}
  rpc DeleteFile(FileId) returns (File) {}
}

message TargetId {
  string targetId = 1;
}

message FileId {
  string fileId = 1;
  string targetId = 2;
}

message File {
  string id = 1;
  string created = 2;
  string updated = 3;
  bool deleted = 4;

  string targetId = 5;
  string name = 6;
  string type = 7;

  bytes data = 8;
  string url = 9;
}

service BillService {
  rpc GetBills(UserId) returns (stream Bill) {}
  rpc CreateBill(Bill) returns (Bill) {}
  rpc DeleteBill(BillId) returns (Bill) {}

  rpc GetPayments(UserId) returns (stream Payment) {}
  rpc GetBillPayments(BillId) returns (stream Payment) {}
  rpc CreatePayment(Payment) returns (Payment) {}
  rpc DeletePayment(PaymentId) returns (Payment) {}

  rpc GetSavings(UserId) returns (stream Saving) {}
}

enum BillCategory {
  HOUSE = 0;
  WORK = 1;
  COMPANY = 2;
  OTHER = 3;
  ACCOUNT = 4;
  ADDITIONAL = 5;
}
enum BillFrequency {
  MONTH = 0;
  TWO_MONTHS = 1;
  THREE_MONTHS = 2;
  HALF_YEAR = 3;
  YEAR = 4;
  NONE = 5;
}

message BillId {
  string billId = 1;
  string userId = 2;
}
message PaymentId {
  string paymentId = 1;
  string userId = 2;
}
message Bill {
  string id = 1;
  string created = 2;
  string updated = 3;
  bool deleted = 4;

  string userId = 5;

  string name = 6;
  string category = 7;
  string frequency = 8;
  optional bool income = 9;
  optional bool qrCode = 10;

  optional float defaultValue = 11;
  optional string defaultAccountNumber = 12;
  optional string defaultAccountReciever = 13;
  optional string defaultAccountDescription = 14;

  optional bool isPayed = 15;
}

message Payment {
  string id = 1;
  string created = 2;
  string updated = 3;
  bool deleted = 4;

  string userId = 5;
  string billId = 6;

  float value = 7;
  string date = 8;
  optional string accountNumber = 9;
  optional string accountReciever = 10;
  optional string accountDescription = 11;
}

message Saving {
  string billId = 1;
  string billCategory = 2;
  string billName = 3;
  optional bool billIncome = 4;
  optional float previousMonth = 5;
  optional float currentMonth = 6;
}

service FoodService {
  rpc GetSupplies(UserId) returns (stream Supply) {}
  rpc CreateSupply(Supply) returns (Supply) {}
  rpc DeleteSupply(SupplyId) returns (Supply) {}
}

message SupplyId {
  string supplyId = 1;
  string userId = 2;
}

message Supply {
  string id = 1;
  string created = 2;
  string updated = 3;
  bool deleted = 4;

  string userId = 5;

  string name = 6;
  string category = 7;
  int32 amount = 8;
  int32 priority = 9;
}

service EnergyService {
  rpc GetTariffs(UserId) returns (stream Tariff) {}
  rpc GetTariff(TariffId) returns (Tariff) {}
  rpc CreateTariff(Tariff) returns (Tariff) {}
  rpc DeleteTariff(TariffId) returns (Tariff) {}

  rpc GetMeters(UserId) returns (stream Meter) {}

  rpc GetMeasurements(MeterId) returns (stream Measurement) {}

  rpc GetEnergySectors(EnergySectorRequest) returns (stream EnergySectorResponse) {}
}

message TariffId {
  string userId = 1;
  string tariffId = 2;
}

message MeterId {
  string userId = 1;
  string meterId = 2;
}

message MeasurementId {
  string userId = 1;
  string measurementId = 2;
}

message Tariff {
  string id = 1;
  string created = 2;
  string updated = 3;
  optional string deleted = 4;

  optional string userId = 5;

  bool global = 6;
  string name = 7;
  repeated TariffSector sectors = 8;
  repeated TariffPrice pricesPerKwh = 9;
  repeated TariffPrice pricesPerMonth = 10;
}

message TariffSector {
  string name = 1;
  bool weekends = 2;
  double stablePrice = 3;
  double variablePrice = 4;
  repeated string timeSector = 5;
}

message TariffPrice {
  string name = 1;
  double price = 2;
}

message Meter {
  string id = 1;
  string created = 2;
  string updated = 3;
  optional string deleted = 4;

  string userId = 5;

  string name = 6;
}

message Measurement {
  string id = 1;
  string created = 2;
  string updated = 3;
  optional string deleted = 4;

  string meterId = 5;

  optional double value = 6;
  string date = 7;
}

message EnergySectorRequest {
  string userId = 1;
  string tariffId = 2;
  string meterId = 3;
  string dateFrom = 4;
  string dateTo = 5;
}

message EnergySectorResponse {
  string tariffId = 1;
  string meterId = 2;
  string name = 3;
  double value = 4;
}

