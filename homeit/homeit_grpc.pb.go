// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: homeit.proto

package homeit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Session, error)
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
	GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UsersService_GetUsersClient, error)
	CreateUser(ctx context.Context, opts ...grpc.CallOption) (UsersService_CreateUserClient, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/homeit.UsersService/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/homeit.UsersService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	out := new(AuthUserResponse)
	err := c.cc.Invoke(ctx, "/homeit.UsersService/AuthUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UsersService_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[0], "/homeit.UsersService/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_GetUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type usersServiceGetUsersClient struct {
	grpc.ClientStream
}

func (x *usersServiceGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) CreateUser(ctx context.Context, opts ...grpc.CallOption) (UsersService_CreateUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[1], "/homeit.UsersService/CreateUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceCreateUserClient{stream}
	return x, nil
}

type UsersService_CreateUserClient interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ClientStream
}

type usersServiceCreateUserClient struct {
	grpc.ClientStream
}

func (x *usersServiceCreateUserClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *usersServiceCreateUserClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	CreateToken(context.Context, *TokenRequest) (*Token, error)
	Login(context.Context, *LoginRequest) (*Session, error)
	AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error)
	GetUsers(*Empty, UsersService_GetUsersServer) error
	CreateUser(UsersService_CreateUserServer) error
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) CreateToken(context.Context, *TokenRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedUsersServiceServer) Login(context.Context, *LoginRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsersServiceServer) AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedUsersServiceServer) GetUsers(*Empty, UsersService_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUsersServiceServer) CreateUser(UsersService_CreateUserServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.UsersService/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.UsersService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.UsersService/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).GetUsers(m, &usersServiceGetUsersServer{stream})
}

type UsersService_GetUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type usersServiceGetUsersServer struct {
	grpc.ServerStream
}

func (x *usersServiceGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UsersService_CreateUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsersServiceServer).CreateUser(&usersServiceCreateUserServer{stream})
}

type UsersService_CreateUserServer interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ServerStream
}

type usersServiceCreateUserServer struct {
	grpc.ServerStream
}

func (x *usersServiceCreateUserServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *usersServiceCreateUserServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homeit.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _UsersService_CreateToken_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UsersService_Login_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _UsersService_AuthUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _UsersService_GetUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateUser",
			Handler:       _UsersService_CreateUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "homeit.proto",
}

// FilesServiceClient is the client API for FilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesServiceClient interface {
	GetFiles(ctx context.Context, in *TargetId, opts ...grpc.CallOption) (FilesService_GetFilesClient, error)
	CreateFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*File, error)
	DeleteFile(ctx context.Context, in *FileId, opts ...grpc.CallOption) (*File, error)
}

type filesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesServiceClient(cc grpc.ClientConnInterface) FilesServiceClient {
	return &filesServiceClient{cc}
}

func (c *filesServiceClient) GetFiles(ctx context.Context, in *TargetId, opts ...grpc.CallOption) (FilesService_GetFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesService_ServiceDesc.Streams[0], "/homeit.FilesService/GetFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesServiceGetFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesService_GetFilesClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type filesServiceGetFilesClient struct {
	grpc.ClientStream
}

func (x *filesServiceGetFilesClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesServiceClient) CreateFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/homeit.FilesService/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) DeleteFile(ctx context.Context, in *FileId, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/homeit.FilesService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServiceServer is the server API for FilesService service.
// All implementations must embed UnimplementedFilesServiceServer
// for forward compatibility
type FilesServiceServer interface {
	GetFiles(*TargetId, FilesService_GetFilesServer) error
	CreateFile(context.Context, *File) (*File, error)
	DeleteFile(context.Context, *FileId) (*File, error)
	mustEmbedUnimplementedFilesServiceServer()
}

// UnimplementedFilesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesServiceServer struct {
}

func (UnimplementedFilesServiceServer) GetFiles(*TargetId, FilesService_GetFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedFilesServiceServer) CreateFile(context.Context, *File) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFilesServiceServer) DeleteFile(context.Context, *FileId) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFilesServiceServer) mustEmbedUnimplementedFilesServiceServer() {}

// UnsafeFilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServiceServer will
// result in compilation errors.
type UnsafeFilesServiceServer interface {
	mustEmbedUnimplementedFilesServiceServer()
}

func RegisterFilesServiceServer(s grpc.ServiceRegistrar, srv FilesServiceServer) {
	s.RegisterService(&FilesService_ServiceDesc, srv)
}

func _FilesService_GetFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TargetId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServiceServer).GetFiles(m, &filesServiceGetFilesServer{stream})
}

type FilesService_GetFilesServer interface {
	Send(*File) error
	grpc.ServerStream
}

type filesServiceGetFilesServer struct {
	grpc.ServerStream
}

func (x *filesServiceGetFilesServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FilesService/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).CreateFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FilesService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).DeleteFile(ctx, req.(*FileId))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesService_ServiceDesc is the grpc.ServiceDesc for FilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homeit.FilesService",
	HandlerType: (*FilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFile",
			Handler:    _FilesService_CreateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FilesService_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFiles",
			Handler:       _FilesService_GetFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "homeit.proto",
}

// BillServiceClient is the client API for BillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillServiceClient interface {
	GetBills(ctx context.Context, in *UserId, opts ...grpc.CallOption) (BillService_GetBillsClient, error)
	CreateBill(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Bill, error)
	DeleteBill(ctx context.Context, in *BillId, opts ...grpc.CallOption) (*Bill, error)
	GetPayments(ctx context.Context, in *UserId, opts ...grpc.CallOption) (BillService_GetPaymentsClient, error)
	GetBillPayments(ctx context.Context, in *BillId, opts ...grpc.CallOption) (BillService_GetBillPaymentsClient, error)
	CreatePayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error)
	DeletePayment(ctx context.Context, in *PaymentId, opts ...grpc.CallOption) (*Payment, error)
	GetSavings(ctx context.Context, in *UserId, opts ...grpc.CallOption) (BillService_GetSavingsClient, error)
}

type billServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillServiceClient(cc grpc.ClientConnInterface) BillServiceClient {
	return &billServiceClient{cc}
}

func (c *billServiceClient) GetBills(ctx context.Context, in *UserId, opts ...grpc.CallOption) (BillService_GetBillsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillService_ServiceDesc.Streams[0], "/homeit.BillService/GetBills", opts...)
	if err != nil {
		return nil, err
	}
	x := &billServiceGetBillsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillService_GetBillsClient interface {
	Recv() (*Bill, error)
	grpc.ClientStream
}

type billServiceGetBillsClient struct {
	grpc.ClientStream
}

func (x *billServiceGetBillsClient) Recv() (*Bill, error) {
	m := new(Bill)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billServiceClient) CreateBill(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Bill, error) {
	out := new(Bill)
	err := c.cc.Invoke(ctx, "/homeit.BillService/CreateBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billServiceClient) DeleteBill(ctx context.Context, in *BillId, opts ...grpc.CallOption) (*Bill, error) {
	out := new(Bill)
	err := c.cc.Invoke(ctx, "/homeit.BillService/DeleteBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billServiceClient) GetPayments(ctx context.Context, in *UserId, opts ...grpc.CallOption) (BillService_GetPaymentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillService_ServiceDesc.Streams[1], "/homeit.BillService/GetPayments", opts...)
	if err != nil {
		return nil, err
	}
	x := &billServiceGetPaymentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillService_GetPaymentsClient interface {
	Recv() (*Payment, error)
	grpc.ClientStream
}

type billServiceGetPaymentsClient struct {
	grpc.ClientStream
}

func (x *billServiceGetPaymentsClient) Recv() (*Payment, error) {
	m := new(Payment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billServiceClient) GetBillPayments(ctx context.Context, in *BillId, opts ...grpc.CallOption) (BillService_GetBillPaymentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillService_ServiceDesc.Streams[2], "/homeit.BillService/GetBillPayments", opts...)
	if err != nil {
		return nil, err
	}
	x := &billServiceGetBillPaymentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillService_GetBillPaymentsClient interface {
	Recv() (*Payment, error)
	grpc.ClientStream
}

type billServiceGetBillPaymentsClient struct {
	grpc.ClientStream
}

func (x *billServiceGetBillPaymentsClient) Recv() (*Payment, error) {
	m := new(Payment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billServiceClient) CreatePayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/homeit.BillService/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billServiceClient) DeletePayment(ctx context.Context, in *PaymentId, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/homeit.BillService/DeletePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billServiceClient) GetSavings(ctx context.Context, in *UserId, opts ...grpc.CallOption) (BillService_GetSavingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillService_ServiceDesc.Streams[3], "/homeit.BillService/GetSavings", opts...)
	if err != nil {
		return nil, err
	}
	x := &billServiceGetSavingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillService_GetSavingsClient interface {
	Recv() (*Saving, error)
	grpc.ClientStream
}

type billServiceGetSavingsClient struct {
	grpc.ClientStream
}

func (x *billServiceGetSavingsClient) Recv() (*Saving, error) {
	m := new(Saving)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BillServiceServer is the server API for BillService service.
// All implementations must embed UnimplementedBillServiceServer
// for forward compatibility
type BillServiceServer interface {
	GetBills(*UserId, BillService_GetBillsServer) error
	CreateBill(context.Context, *Bill) (*Bill, error)
	DeleteBill(context.Context, *BillId) (*Bill, error)
	GetPayments(*UserId, BillService_GetPaymentsServer) error
	GetBillPayments(*BillId, BillService_GetBillPaymentsServer) error
	CreatePayment(context.Context, *Payment) (*Payment, error)
	DeletePayment(context.Context, *PaymentId) (*Payment, error)
	GetSavings(*UserId, BillService_GetSavingsServer) error
	mustEmbedUnimplementedBillServiceServer()
}

// UnimplementedBillServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillServiceServer struct {
}

func (UnimplementedBillServiceServer) GetBills(*UserId, BillService_GetBillsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBills not implemented")
}
func (UnimplementedBillServiceServer) CreateBill(context.Context, *Bill) (*Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBill not implemented")
}
func (UnimplementedBillServiceServer) DeleteBill(context.Context, *BillId) (*Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBill not implemented")
}
func (UnimplementedBillServiceServer) GetPayments(*UserId, BillService_GetPaymentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPayments not implemented")
}
func (UnimplementedBillServiceServer) GetBillPayments(*BillId, BillService_GetBillPaymentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBillPayments not implemented")
}
func (UnimplementedBillServiceServer) CreatePayment(context.Context, *Payment) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedBillServiceServer) DeletePayment(context.Context, *PaymentId) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayment not implemented")
}
func (UnimplementedBillServiceServer) GetSavings(*UserId, BillService_GetSavingsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSavings not implemented")
}
func (UnimplementedBillServiceServer) mustEmbedUnimplementedBillServiceServer() {}

// UnsafeBillServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillServiceServer will
// result in compilation errors.
type UnsafeBillServiceServer interface {
	mustEmbedUnimplementedBillServiceServer()
}

func RegisterBillServiceServer(s grpc.ServiceRegistrar, srv BillServiceServer) {
	s.RegisterService(&BillService_ServiceDesc, srv)
}

func _BillService_GetBills_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillServiceServer).GetBills(m, &billServiceGetBillsServer{stream})
}

type BillService_GetBillsServer interface {
	Send(*Bill) error
	grpc.ServerStream
}

type billServiceGetBillsServer struct {
	grpc.ServerStream
}

func (x *billServiceGetBillsServer) Send(m *Bill) error {
	return x.ServerStream.SendMsg(m)
}

func _BillService_CreateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillServiceServer).CreateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.BillService/CreateBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillServiceServer).CreateBill(ctx, req.(*Bill))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillService_DeleteBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillServiceServer).DeleteBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.BillService/DeleteBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillServiceServer).DeleteBill(ctx, req.(*BillId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillService_GetPayments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillServiceServer).GetPayments(m, &billServiceGetPaymentsServer{stream})
}

type BillService_GetPaymentsServer interface {
	Send(*Payment) error
	grpc.ServerStream
}

type billServiceGetPaymentsServer struct {
	grpc.ServerStream
}

func (x *billServiceGetPaymentsServer) Send(m *Payment) error {
	return x.ServerStream.SendMsg(m)
}

func _BillService_GetBillPayments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BillId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillServiceServer).GetBillPayments(m, &billServiceGetBillPaymentsServer{stream})
}

type BillService_GetBillPaymentsServer interface {
	Send(*Payment) error
	grpc.ServerStream
}

type billServiceGetBillPaymentsServer struct {
	grpc.ServerStream
}

func (x *billServiceGetBillPaymentsServer) Send(m *Payment) error {
	return x.ServerStream.SendMsg(m)
}

func _BillService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.BillService/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillServiceServer).CreatePayment(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillService_DeletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillServiceServer).DeletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.BillService/DeletePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillServiceServer).DeletePayment(ctx, req.(*PaymentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillService_GetSavings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillServiceServer).GetSavings(m, &billServiceGetSavingsServer{stream})
}

type BillService_GetSavingsServer interface {
	Send(*Saving) error
	grpc.ServerStream
}

type billServiceGetSavingsServer struct {
	grpc.ServerStream
}

func (x *billServiceGetSavingsServer) Send(m *Saving) error {
	return x.ServerStream.SendMsg(m)
}

// BillService_ServiceDesc is the grpc.ServiceDesc for BillService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homeit.BillService",
	HandlerType: (*BillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBill",
			Handler:    _BillService_CreateBill_Handler,
		},
		{
			MethodName: "DeleteBill",
			Handler:    _BillService_DeleteBill_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _BillService_CreatePayment_Handler,
		},
		{
			MethodName: "DeletePayment",
			Handler:    _BillService_DeletePayment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBills",
			Handler:       _BillService_GetBills_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPayments",
			Handler:       _BillService_GetPayments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBillPayments",
			Handler:       _BillService_GetBillPayments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSavings",
			Handler:       _BillService_GetSavings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "homeit.proto",
}

// FoodServiceClient is the client API for FoodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodServiceClient interface {
	GetSupplies(ctx context.Context, in *UserId, opts ...grpc.CallOption) (FoodService_GetSuppliesClient, error)
	CreateSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Supply, error)
	DeleteSupply(ctx context.Context, in *SupplyId, opts ...grpc.CallOption) (*Supply, error)
	GetMenus(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (FoodService_GetMenusClient, error)
	CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error)
	CopyMenu(ctx context.Context, in *CopyMenuRequest, opts ...grpc.CallOption) (*CopyMenuResponse, error)
	DeleteMenu(ctx context.Context, in *MenuId, opts ...grpc.CallOption) (*Menu, error)
	GetRecipes(ctx context.Context, in *UserId, opts ...grpc.CallOption) (FoodService_GetRecipesClient, error)
	CreateRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*Recipe, error)
	DeleteRecipe(ctx context.Context, in *RecipeId, opts ...grpc.CallOption) (*Recipe, error)
	GetIngredients(ctx context.Context, in *UserId, opts ...grpc.CallOption) (FoodService_GetIngredientsClient, error)
	CreateIngredient(ctx context.Context, in *Ingredient, opts ...grpc.CallOption) (*Ingredient, error)
	DeleteIngredient(ctx context.Context, in *IngredientId, opts ...grpc.CallOption) (*Ingredient, error)
}

type foodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodServiceClient(cc grpc.ClientConnInterface) FoodServiceClient {
	return &foodServiceClient{cc}
}

func (c *foodServiceClient) GetSupplies(ctx context.Context, in *UserId, opts ...grpc.CallOption) (FoodService_GetSuppliesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FoodService_ServiceDesc.Streams[0], "/homeit.FoodService/GetSupplies", opts...)
	if err != nil {
		return nil, err
	}
	x := &foodServiceGetSuppliesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FoodService_GetSuppliesClient interface {
	Recv() (*Supply, error)
	grpc.ClientStream
}

type foodServiceGetSuppliesClient struct {
	grpc.ClientStream
}

func (x *foodServiceGetSuppliesClient) Recv() (*Supply, error) {
	m := new(Supply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *foodServiceClient) CreateSupply(ctx context.Context, in *Supply, opts ...grpc.CallOption) (*Supply, error) {
	out := new(Supply)
	err := c.cc.Invoke(ctx, "/homeit.FoodService/CreateSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) DeleteSupply(ctx context.Context, in *SupplyId, opts ...grpc.CallOption) (*Supply, error) {
	out := new(Supply)
	err := c.cc.Invoke(ctx, "/homeit.FoodService/DeleteSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) GetMenus(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (FoodService_GetMenusClient, error) {
	stream, err := c.cc.NewStream(ctx, &FoodService_ServiceDesc.Streams[1], "/homeit.FoodService/GetMenus", opts...)
	if err != nil {
		return nil, err
	}
	x := &foodServiceGetMenusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FoodService_GetMenusClient interface {
	Recv() (*Menu, error)
	grpc.ClientStream
}

type foodServiceGetMenusClient struct {
	grpc.ClientStream
}

func (x *foodServiceGetMenusClient) Recv() (*Menu, error) {
	m := new(Menu)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *foodServiceClient) CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/homeit.FoodService/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) CopyMenu(ctx context.Context, in *CopyMenuRequest, opts ...grpc.CallOption) (*CopyMenuResponse, error) {
	out := new(CopyMenuResponse)
	err := c.cc.Invoke(ctx, "/homeit.FoodService/CopyMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) DeleteMenu(ctx context.Context, in *MenuId, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/homeit.FoodService/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) GetRecipes(ctx context.Context, in *UserId, opts ...grpc.CallOption) (FoodService_GetRecipesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FoodService_ServiceDesc.Streams[2], "/homeit.FoodService/GetRecipes", opts...)
	if err != nil {
		return nil, err
	}
	x := &foodServiceGetRecipesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FoodService_GetRecipesClient interface {
	Recv() (*Recipe, error)
	grpc.ClientStream
}

type foodServiceGetRecipesClient struct {
	grpc.ClientStream
}

func (x *foodServiceGetRecipesClient) Recv() (*Recipe, error) {
	m := new(Recipe)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *foodServiceClient) CreateRecipe(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*Recipe, error) {
	out := new(Recipe)
	err := c.cc.Invoke(ctx, "/homeit.FoodService/CreateRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) DeleteRecipe(ctx context.Context, in *RecipeId, opts ...grpc.CallOption) (*Recipe, error) {
	out := new(Recipe)
	err := c.cc.Invoke(ctx, "/homeit.FoodService/DeleteRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) GetIngredients(ctx context.Context, in *UserId, opts ...grpc.CallOption) (FoodService_GetIngredientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FoodService_ServiceDesc.Streams[3], "/homeit.FoodService/GetIngredients", opts...)
	if err != nil {
		return nil, err
	}
	x := &foodServiceGetIngredientsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FoodService_GetIngredientsClient interface {
	Recv() (*Ingredient, error)
	grpc.ClientStream
}

type foodServiceGetIngredientsClient struct {
	grpc.ClientStream
}

func (x *foodServiceGetIngredientsClient) Recv() (*Ingredient, error) {
	m := new(Ingredient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *foodServiceClient) CreateIngredient(ctx context.Context, in *Ingredient, opts ...grpc.CallOption) (*Ingredient, error) {
	out := new(Ingredient)
	err := c.cc.Invoke(ctx, "/homeit.FoodService/CreateIngredient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) DeleteIngredient(ctx context.Context, in *IngredientId, opts ...grpc.CallOption) (*Ingredient, error) {
	out := new(Ingredient)
	err := c.cc.Invoke(ctx, "/homeit.FoodService/DeleteIngredient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodServiceServer is the server API for FoodService service.
// All implementations must embed UnimplementedFoodServiceServer
// for forward compatibility
type FoodServiceServer interface {
	GetSupplies(*UserId, FoodService_GetSuppliesServer) error
	CreateSupply(context.Context, *Supply) (*Supply, error)
	DeleteSupply(context.Context, *SupplyId) (*Supply, error)
	GetMenus(*MenuRequest, FoodService_GetMenusServer) error
	CreateMenu(context.Context, *Menu) (*Menu, error)
	CopyMenu(context.Context, *CopyMenuRequest) (*CopyMenuResponse, error)
	DeleteMenu(context.Context, *MenuId) (*Menu, error)
	GetRecipes(*UserId, FoodService_GetRecipesServer) error
	CreateRecipe(context.Context, *Recipe) (*Recipe, error)
	DeleteRecipe(context.Context, *RecipeId) (*Recipe, error)
	GetIngredients(*UserId, FoodService_GetIngredientsServer) error
	CreateIngredient(context.Context, *Ingredient) (*Ingredient, error)
	DeleteIngredient(context.Context, *IngredientId) (*Ingredient, error)
	mustEmbedUnimplementedFoodServiceServer()
}

// UnimplementedFoodServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFoodServiceServer struct {
}

func (UnimplementedFoodServiceServer) GetSupplies(*UserId, FoodService_GetSuppliesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSupplies not implemented")
}
func (UnimplementedFoodServiceServer) CreateSupply(context.Context, *Supply) (*Supply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupply not implemented")
}
func (UnimplementedFoodServiceServer) DeleteSupply(context.Context, *SupplyId) (*Supply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupply not implemented")
}
func (UnimplementedFoodServiceServer) GetMenus(*MenuRequest, FoodService_GetMenusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMenus not implemented")
}
func (UnimplementedFoodServiceServer) CreateMenu(context.Context, *Menu) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedFoodServiceServer) CopyMenu(context.Context, *CopyMenuRequest) (*CopyMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyMenu not implemented")
}
func (UnimplementedFoodServiceServer) DeleteMenu(context.Context, *MenuId) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedFoodServiceServer) GetRecipes(*UserId, FoodService_GetRecipesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRecipes not implemented")
}
func (UnimplementedFoodServiceServer) CreateRecipe(context.Context, *Recipe) (*Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipe not implemented")
}
func (UnimplementedFoodServiceServer) DeleteRecipe(context.Context, *RecipeId) (*Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipe not implemented")
}
func (UnimplementedFoodServiceServer) GetIngredients(*UserId, FoodService_GetIngredientsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIngredients not implemented")
}
func (UnimplementedFoodServiceServer) CreateIngredient(context.Context, *Ingredient) (*Ingredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngredient not implemented")
}
func (UnimplementedFoodServiceServer) DeleteIngredient(context.Context, *IngredientId) (*Ingredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIngredient not implemented")
}
func (UnimplementedFoodServiceServer) mustEmbedUnimplementedFoodServiceServer() {}

// UnsafeFoodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodServiceServer will
// result in compilation errors.
type UnsafeFoodServiceServer interface {
	mustEmbedUnimplementedFoodServiceServer()
}

func RegisterFoodServiceServer(s grpc.ServiceRegistrar, srv FoodServiceServer) {
	s.RegisterService(&FoodService_ServiceDesc, srv)
}

func _FoodService_GetSupplies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodServiceServer).GetSupplies(m, &foodServiceGetSuppliesServer{stream})
}

type FoodService_GetSuppliesServer interface {
	Send(*Supply) error
	grpc.ServerStream
}

type foodServiceGetSuppliesServer struct {
	grpc.ServerStream
}

func (x *foodServiceGetSuppliesServer) Send(m *Supply) error {
	return x.ServerStream.SendMsg(m)
}

func _FoodService_CreateSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).CreateSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FoodService/CreateSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).CreateSupply(ctx, req.(*Supply))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_DeleteSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).DeleteSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FoodService/DeleteSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).DeleteSupply(ctx, req.(*SupplyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_GetMenus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MenuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodServiceServer).GetMenus(m, &foodServiceGetMenusServer{stream})
}

type FoodService_GetMenusServer interface {
	Send(*Menu) error
	grpc.ServerStream
}

type foodServiceGetMenusServer struct {
	grpc.ServerStream
}

func (x *foodServiceGetMenusServer) Send(m *Menu) error {
	return x.ServerStream.SendMsg(m)
}

func _FoodService_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FoodService/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).CreateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_CopyMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).CopyMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FoodService/CopyMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).CopyMenu(ctx, req.(*CopyMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FoodService/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).DeleteMenu(ctx, req.(*MenuId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_GetRecipes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodServiceServer).GetRecipes(m, &foodServiceGetRecipesServer{stream})
}

type FoodService_GetRecipesServer interface {
	Send(*Recipe) error
	grpc.ServerStream
}

type foodServiceGetRecipesServer struct {
	grpc.ServerStream
}

func (x *foodServiceGetRecipesServer) Send(m *Recipe) error {
	return x.ServerStream.SendMsg(m)
}

func _FoodService_CreateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recipe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).CreateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FoodService/CreateRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).CreateRecipe(ctx, req.(*Recipe))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_DeleteRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).DeleteRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FoodService/DeleteRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).DeleteRecipe(ctx, req.(*RecipeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_GetIngredients_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodServiceServer).GetIngredients(m, &foodServiceGetIngredientsServer{stream})
}

type FoodService_GetIngredientsServer interface {
	Send(*Ingredient) error
	grpc.ServerStream
}

type foodServiceGetIngredientsServer struct {
	grpc.ServerStream
}

func (x *foodServiceGetIngredientsServer) Send(m *Ingredient) error {
	return x.ServerStream.SendMsg(m)
}

func _FoodService_CreateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ingredient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).CreateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FoodService/CreateIngredient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).CreateIngredient(ctx, req.(*Ingredient))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_DeleteIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngredientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).DeleteIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.FoodService/DeleteIngredient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).DeleteIngredient(ctx, req.(*IngredientId))
	}
	return interceptor(ctx, in, info, handler)
}

// FoodService_ServiceDesc is the grpc.ServiceDesc for FoodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homeit.FoodService",
	HandlerType: (*FoodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSupply",
			Handler:    _FoodService_CreateSupply_Handler,
		},
		{
			MethodName: "DeleteSupply",
			Handler:    _FoodService_DeleteSupply_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _FoodService_CreateMenu_Handler,
		},
		{
			MethodName: "CopyMenu",
			Handler:    _FoodService_CopyMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _FoodService_DeleteMenu_Handler,
		},
		{
			MethodName: "CreateRecipe",
			Handler:    _FoodService_CreateRecipe_Handler,
		},
		{
			MethodName: "DeleteRecipe",
			Handler:    _FoodService_DeleteRecipe_Handler,
		},
		{
			MethodName: "CreateIngredient",
			Handler:    _FoodService_CreateIngredient_Handler,
		},
		{
			MethodName: "DeleteIngredient",
			Handler:    _FoodService_DeleteIngredient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSupplies",
			Handler:       _FoodService_GetSupplies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMenus",
			Handler:       _FoodService_GetMenus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRecipes",
			Handler:       _FoodService_GetRecipes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIngredients",
			Handler:       _FoodService_GetIngredients_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "homeit.proto",
}

// EnergyServiceClient is the client API for EnergyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnergyServiceClient interface {
	GetTariffs(ctx context.Context, in *UserId, opts ...grpc.CallOption) (EnergyService_GetTariffsClient, error)
	GetTariff(ctx context.Context, in *TariffId, opts ...grpc.CallOption) (*Tariff, error)
	CreateTariff(ctx context.Context, in *Tariff, opts ...grpc.CallOption) (*Tariff, error)
	DeleteTariff(ctx context.Context, in *TariffId, opts ...grpc.CallOption) (*Tariff, error)
	GetMeters(ctx context.Context, in *UserId, opts ...grpc.CallOption) (EnergyService_GetMetersClient, error)
	GetMeasurements(ctx context.Context, in *MeterId, opts ...grpc.CallOption) (EnergyService_GetMeasurementsClient, error)
	GetEnergySectors(ctx context.Context, in *EnergySectorRequest, opts ...grpc.CallOption) (EnergyService_GetEnergySectorsClient, error)
}

type energyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnergyServiceClient(cc grpc.ClientConnInterface) EnergyServiceClient {
	return &energyServiceClient{cc}
}

func (c *energyServiceClient) GetTariffs(ctx context.Context, in *UserId, opts ...grpc.CallOption) (EnergyService_GetTariffsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[0], "/homeit.EnergyService/GetTariffs", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetTariffsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetTariffsClient interface {
	Recv() (*Tariff, error)
	grpc.ClientStream
}

type energyServiceGetTariffsClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetTariffsClient) Recv() (*Tariff, error) {
	m := new(Tariff)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *energyServiceClient) GetTariff(ctx context.Context, in *TariffId, opts ...grpc.CallOption) (*Tariff, error) {
	out := new(Tariff)
	err := c.cc.Invoke(ctx, "/homeit.EnergyService/GetTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) CreateTariff(ctx context.Context, in *Tariff, opts ...grpc.CallOption) (*Tariff, error) {
	out := new(Tariff)
	err := c.cc.Invoke(ctx, "/homeit.EnergyService/CreateTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) DeleteTariff(ctx context.Context, in *TariffId, opts ...grpc.CallOption) (*Tariff, error) {
	out := new(Tariff)
	err := c.cc.Invoke(ctx, "/homeit.EnergyService/DeleteTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) GetMeters(ctx context.Context, in *UserId, opts ...grpc.CallOption) (EnergyService_GetMetersClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[1], "/homeit.EnergyService/GetMeters", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetMetersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetMetersClient interface {
	Recv() (*Meter, error)
	grpc.ClientStream
}

type energyServiceGetMetersClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetMetersClient) Recv() (*Meter, error) {
	m := new(Meter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *energyServiceClient) GetMeasurements(ctx context.Context, in *MeterId, opts ...grpc.CallOption) (EnergyService_GetMeasurementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[2], "/homeit.EnergyService/GetMeasurements", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetMeasurementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetMeasurementsClient interface {
	Recv() (*Measurement, error)
	grpc.ClientStream
}

type energyServiceGetMeasurementsClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetMeasurementsClient) Recv() (*Measurement, error) {
	m := new(Measurement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *energyServiceClient) GetEnergySectors(ctx context.Context, in *EnergySectorRequest, opts ...grpc.CallOption) (EnergyService_GetEnergySectorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[3], "/homeit.EnergyService/GetEnergySectors", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetEnergySectorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetEnergySectorsClient interface {
	Recv() (*EnergySectorResponse, error)
	grpc.ClientStream
}

type energyServiceGetEnergySectorsClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetEnergySectorsClient) Recv() (*EnergySectorResponse, error) {
	m := new(EnergySectorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnergyServiceServer is the server API for EnergyService service.
// All implementations must embed UnimplementedEnergyServiceServer
// for forward compatibility
type EnergyServiceServer interface {
	GetTariffs(*UserId, EnergyService_GetTariffsServer) error
	GetTariff(context.Context, *TariffId) (*Tariff, error)
	CreateTariff(context.Context, *Tariff) (*Tariff, error)
	DeleteTariff(context.Context, *TariffId) (*Tariff, error)
	GetMeters(*UserId, EnergyService_GetMetersServer) error
	GetMeasurements(*MeterId, EnergyService_GetMeasurementsServer) error
	GetEnergySectors(*EnergySectorRequest, EnergyService_GetEnergySectorsServer) error
	mustEmbedUnimplementedEnergyServiceServer()
}

// UnimplementedEnergyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnergyServiceServer struct {
}

func (UnimplementedEnergyServiceServer) GetTariffs(*UserId, EnergyService_GetTariffsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTariffs not implemented")
}
func (UnimplementedEnergyServiceServer) GetTariff(context.Context, *TariffId) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTariff not implemented")
}
func (UnimplementedEnergyServiceServer) CreateTariff(context.Context, *Tariff) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTariff not implemented")
}
func (UnimplementedEnergyServiceServer) DeleteTariff(context.Context, *TariffId) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTariff not implemented")
}
func (UnimplementedEnergyServiceServer) GetMeters(*UserId, EnergyService_GetMetersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeters not implemented")
}
func (UnimplementedEnergyServiceServer) GetMeasurements(*MeterId, EnergyService_GetMeasurementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeasurements not implemented")
}
func (UnimplementedEnergyServiceServer) GetEnergySectors(*EnergySectorRequest, EnergyService_GetEnergySectorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEnergySectors not implemented")
}
func (UnimplementedEnergyServiceServer) mustEmbedUnimplementedEnergyServiceServer() {}

// UnsafeEnergyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnergyServiceServer will
// result in compilation errors.
type UnsafeEnergyServiceServer interface {
	mustEmbedUnimplementedEnergyServiceServer()
}

func RegisterEnergyServiceServer(s grpc.ServiceRegistrar, srv EnergyServiceServer) {
	s.RegisterService(&EnergyService_ServiceDesc, srv)
}

func _EnergyService_GetTariffs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetTariffs(m, &energyServiceGetTariffsServer{stream})
}

type EnergyService_GetTariffsServer interface {
	Send(*Tariff) error
	grpc.ServerStream
}

type energyServiceGetTariffsServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetTariffsServer) Send(m *Tariff) error {
	return x.ServerStream.SendMsg(m)
}

func _EnergyService_GetTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TariffId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).GetTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.EnergyService/GetTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).GetTariff(ctx, req.(*TariffId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_CreateTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tariff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).CreateTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.EnergyService/CreateTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).CreateTariff(ctx, req.(*Tariff))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_DeleteTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TariffId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).DeleteTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homeit.EnergyService/DeleteTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).DeleteTariff(ctx, req.(*TariffId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_GetMeters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetMeters(m, &energyServiceGetMetersServer{stream})
}

type EnergyService_GetMetersServer interface {
	Send(*Meter) error
	grpc.ServerStream
}

type energyServiceGetMetersServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetMetersServer) Send(m *Meter) error {
	return x.ServerStream.SendMsg(m)
}

func _EnergyService_GetMeasurements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MeterId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetMeasurements(m, &energyServiceGetMeasurementsServer{stream})
}

type EnergyService_GetMeasurementsServer interface {
	Send(*Measurement) error
	grpc.ServerStream
}

type energyServiceGetMeasurementsServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetMeasurementsServer) Send(m *Measurement) error {
	return x.ServerStream.SendMsg(m)
}

func _EnergyService_GetEnergySectors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EnergySectorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetEnergySectors(m, &energyServiceGetEnergySectorsServer{stream})
}

type EnergyService_GetEnergySectorsServer interface {
	Send(*EnergySectorResponse) error
	grpc.ServerStream
}

type energyServiceGetEnergySectorsServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetEnergySectorsServer) Send(m *EnergySectorResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EnergyService_ServiceDesc is the grpc.ServiceDesc for EnergyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnergyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homeit.EnergyService",
	HandlerType: (*EnergyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTariff",
			Handler:    _EnergyService_GetTariff_Handler,
		},
		{
			MethodName: "CreateTariff",
			Handler:    _EnergyService_CreateTariff_Handler,
		},
		{
			MethodName: "DeleteTariff",
			Handler:    _EnergyService_DeleteTariff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTariffs",
			Handler:       _EnergyService_GetTariffs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeters",
			Handler:       _EnergyService_GetMeters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeasurements",
			Handler:       _EnergyService_GetMeasurements_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEnergySectors",
			Handler:       _EnergyService_GetEnergySectors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "homeit.proto",
}
