// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: energy.proto

package energy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnergyServiceClient is the client API for EnergyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnergyServiceClient interface {
	GetTariifs(ctx context.Context, in *UserId, opts ...grpc.CallOption) (EnergyService_GetTariifsClient, error)
	CreateTariff(ctx context.Context, in *Tariff, opts ...grpc.CallOption) (*Tariff, error)
	DeleteTariff(ctx context.Context, in *TariffId, opts ...grpc.CallOption) (*Tariff, error)
}

type energyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnergyServiceClient(cc grpc.ClientConnInterface) EnergyServiceClient {
	return &energyServiceClient{cc}
}

func (c *energyServiceClient) GetTariifs(ctx context.Context, in *UserId, opts ...grpc.CallOption) (EnergyService_GetTariifsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnergyService_ServiceDesc.Streams[0], "/energy.EnergyService/GetTariifs", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyServiceGetTariifsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnergyService_GetTariifsClient interface {
	Recv() (*Tariff, error)
	grpc.ClientStream
}

type energyServiceGetTariifsClient struct {
	grpc.ClientStream
}

func (x *energyServiceGetTariifsClient) Recv() (*Tariff, error) {
	m := new(Tariff)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *energyServiceClient) CreateTariff(ctx context.Context, in *Tariff, opts ...grpc.CallOption) (*Tariff, error) {
	out := new(Tariff)
	err := c.cc.Invoke(ctx, "/energy.EnergyService/CreateTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyServiceClient) DeleteTariff(ctx context.Context, in *TariffId, opts ...grpc.CallOption) (*Tariff, error) {
	out := new(Tariff)
	err := c.cc.Invoke(ctx, "/energy.EnergyService/DeleteTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnergyServiceServer is the server API for EnergyService service.
// All implementations must embed UnimplementedEnergyServiceServer
// for forward compatibility
type EnergyServiceServer interface {
	GetTariifs(*UserId, EnergyService_GetTariifsServer) error
	CreateTariff(context.Context, *Tariff) (*Tariff, error)
	DeleteTariff(context.Context, *TariffId) (*Tariff, error)
	mustEmbedUnimplementedEnergyServiceServer()
}

// UnimplementedEnergyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnergyServiceServer struct {
}

func (UnimplementedEnergyServiceServer) GetTariifs(*UserId, EnergyService_GetTariifsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTariifs not implemented")
}
func (UnimplementedEnergyServiceServer) CreateTariff(context.Context, *Tariff) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTariff not implemented")
}
func (UnimplementedEnergyServiceServer) DeleteTariff(context.Context, *TariffId) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTariff not implemented")
}
func (UnimplementedEnergyServiceServer) mustEmbedUnimplementedEnergyServiceServer() {}

// UnsafeEnergyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnergyServiceServer will
// result in compilation errors.
type UnsafeEnergyServiceServer interface {
	mustEmbedUnimplementedEnergyServiceServer()
}

func RegisterEnergyServiceServer(s grpc.ServiceRegistrar, srv EnergyServiceServer) {
	s.RegisterService(&EnergyService_ServiceDesc, srv)
}

func _EnergyService_GetTariifs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServiceServer).GetTariifs(m, &energyServiceGetTariifsServer{stream})
}

type EnergyService_GetTariifsServer interface {
	Send(*Tariff) error
	grpc.ServerStream
}

type energyServiceGetTariifsServer struct {
	grpc.ServerStream
}

func (x *energyServiceGetTariifsServer) Send(m *Tariff) error {
	return x.ServerStream.SendMsg(m)
}

func _EnergyService_CreateTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tariff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).CreateTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/energy.EnergyService/CreateTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).CreateTariff(ctx, req.(*Tariff))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyService_DeleteTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TariffId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServiceServer).DeleteTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/energy.EnergyService/DeleteTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServiceServer).DeleteTariff(ctx, req.(*TariffId))
	}
	return interceptor(ctx, in, info, handler)
}

// EnergyService_ServiceDesc is the grpc.ServiceDesc for EnergyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnergyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "energy.EnergyService",
	HandlerType: (*EnergyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTariff",
			Handler:    _EnergyService_CreateTariff_Handler,
		},
		{
			MethodName: "DeleteTariff",
			Handler:    _EnergyService_DeleteTariff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTariifs",
			Handler:       _EnergyService_GetTariifs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "energy.proto",
}
